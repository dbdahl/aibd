
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(74927)
> library(aibd2)
Warning message:
package ‘aibd2’ was built under R version 3.5.3 
> 
> stamp <- Sys.getenv("stamp")
> 
> pdf(paste0(stamp,".pdf"),width=6,height=4)
> 
> mass <- 1.5
> sigx <- 3.0
> sigw <- 1.0
> nItems <- as.integer(Sys.getenv("nItems"))
> 
> nSamples <- 1000
> nSamples <- as.integer(Sys.getenv("nSamples")) 
> 
> distances <- as.matrix(dist(scale(USArrests)))
> which <- sample(1:nrow(distances),nItems)
> distances <- distances[which,which]
> 
> temperature <- 4
> similarity <- 1/as.matrix(distances)^temperature
> simVector <- as.vector(similarity)
> simVector <- simVector[!is.infinite(simVector)]
> plot(simVector,type="h")
> 
> distIBP <- ibp(mass,nItems)
> distAIBD <- aibd(mass,1:nItems,similarity)
> 
> Z <- sampleFeatureAllocation(1, distAIBD, "scala")[[1]]
> dim(Z)
[1] 30  6
> 
> dimW <- 32
> W <- matrix(rnorm(ncol(Z)*dimW,sd=sigw),nrow=ncol(Z),ncol=dimW)
> 
> e <- rnorm(nrow(Z)*ncol(W),0,sd=sigx)
> X <- Z %*% W + e
> 
> samplesAIBD <- samplePosteriorLGLFM(Z, distAIBD, X, sdX=sigx, sdW=sigw, samplingMethod="viaNeighborhoods2", implementation="scala", nSamples=nSamples, parallel=TRUE, rankOneUpdates=TRUE)
[                                                                                                    ]****************************************************************************************************]
Parallel:           true
Rank-one updates:   true
Main lapse:         1 invocations in 2168.7627 seconds
Combinatoric lapse: 30000 invocations in 2049.2406 seconds
Singleton lapse:    30000 invocations in 85.7923 seconds
Enumeration lapse;  30000 invocations in 28.6126 seconds
> 
> samplesIBP <- samplePosteriorLGLFM(Z, distIBP, X, sdX=sigx, sdW=sigw, samplingMethod="viaNeighborhoods2", implementation="scala", nSamples=nSamples, parallel=TRUE, rankOneUpdates=TRUE)
[                                                                                                    ]****************************************************************************************************]
Parallel:           true
Rank-one updates:   true
Main lapse:         1 invocations in 181.3324 seconds
Combinatoric lapse: 30000 invocations in 145.2947 seconds
Singleton lapse:    30000 invocations in 12.0250 seconds
Enumeration lapse;  30000 invocations in 20.5807 seconds
> 
> library(sdols)
Warning message:
package ‘sdols’ was built under R version 3.5.3 
> epamAIBD <- expectedPairwiseAllocationMatrix(samplesAIBD)
> epamIBP  <- expectedPairwiseAllocationMatrix(samplesIBP)
> 
> plot(as.vector(epamAIBD),as.vector(as.matrix(distances)), main="AIBD")
> cor(as.vector(epamAIBD),as.vector(as.matrix(distances)))
[1] -0.6315476
> 
> plot(as.vector(epamIBP),as.vector(as.matrix(distances)), main="IBP")
> cor(as.vector(epamIBP),as.vector(as.matrix(distances)))
[1] -0.3273479
> 
> salso(epamAIBD, structure = "featureAllocation")
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    1    1    0    0    0    0    0    0     0
 [2,]    1    0    0    1    0    0    0    0    0     0
 [3,]    1    0    0    0    1    0    0    0    0     0
 [4,]    1    1    0    0    0    1    0    0    0     0
 [5,]    1    0    0    0    0    1    1    0    0     0
 [6,]    1    0    0    1    0    0    0    0    0     0
 [7,]    1    0    0    0    1    0    0    0    0     0
 [8,]    1    1    0    0    0    0    0    1    0     0
 [9,]    1    1    1    0    0    0    0    0    0     0
[10,]    1    0    0    0    0    0    0    0    1     0
[11,]    1    1    0    0    0    0    0    0    0     0
[12,]    1    0    0    0    0    0    0    0    0     1
[13,]    1    0    0    1    0    0    0    0    0     0
[14,]    1    0    0    1    0    0    0    0    0     0
[15,]    1    1    0    0    0    0    1    0    0     0
[16,]    1    0    0    1    0    0    0    0    0     0
[17,]    1    1    0    0    0    1    0    0    0     0
[18,]    1    1    0    0    0    0    0    0    0     0
[19,]    1    1    0    0    0    0    0    0    0     0
[20,]    1    1    0    0    0    0    0    0    0     0
[21,]    1    1    0    0    0    0    0    1    0     0
[22,]    1    1    0    0    0    0    0    0    0     0
[23,]    1    1    1    1    0    0    0    0    0     0
[24,]    1    0    1    0    1    0    0    0    0     0
[25,]    1    1    0    0    0    0    0    0    0     0
[26,]    1    0    1    0    0    0    0    1    0     0
[27,]    1    1    0    0    0    0    0    1    0     0
[28,]    1    0    0    0    0    0    0    0    0     0
[29,]    1    1    0    1    0    0    0    0    0     0
[30,]    1    1    0    0    0    0    0    0    0     0
attr(,"nScans")
[1] -1
attr(,"nCandidates")
[1] 120
> salso(epamIBP,  structure = "featureAllocation")
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    1    0    0    0    0    0    0    0     0
 [2,]    1    0    1    0    0    0    0    0    0     0
 [3,]    1    0    0    1    0    0    0    0    0     0
 [4,]    1    0    1    0    1    0    0    0    0     0
 [5,]    1    0    0    0    0    1    0    0    0     0
 [6,]    1    0    0    0    0    0    1    0    0     0
 [7,]    1    1    0    0    0    0    0    0    0     0
 [8,]    1    1    0    0    0    0    0    1    0     0
 [9,]    1    1    0    0    0    0    0    0    0     0
[10,]    1    0    0    0    0    0    0    0    1     0
[11,]    1    0    0    0    1    0    0    0    0     0
[12,]    1    0    0    0    0    0    0    0    0     0
[13,]    1    0    0    0    1    0    1    0    0     0
[14,]    1    0    0    0    1    0    0    0    0     0
[15,]    1    0    1    0    0    0    0    1    0     0
[16,]    1    0    0    0    1    0    0    0    0     0
[17,]    1    0    1    0    0    0    0    0    0     0
[18,]    1    1    1    0    0    0    0    0    0     0
[19,]    1    0    1    0    0    0    0    0    0     0
[20,]    1    0    0    0    1    0    0    0    0     0
[21,]    1    1    0    0    0    0    0    0    0     1
[22,]    1    1    0    0    1    0    0    0    0     0
[23,]    1    1    1    0    1    0    0    0    0     0
[24,]    1    0    0    0    1    0    0    0    0     0
[25,]    1    0    1    0    0    0    0    0    0     0
[26,]    1    1    0    0    0    0    0    0    0     0
[27,]    1    1    0    0    0    0    0    0    0     0
[28,]    1    0    0    0    0    0    0    0    0     0
[29,]    1    0    1    0    0    0    0    0    0     0
[30,]    1    1    0    0    0    0    0    0    0     0
attr(,"nScans")
[1] -1
attr(,"nCandidates")
[1] 120
> 
> dev.off()
null device 
          1 
> save.image(file=paste0(stamp,".RData"))
> 
> 
> proc.time()
    user   system  elapsed 
  11.288    0.564 2377.103 
