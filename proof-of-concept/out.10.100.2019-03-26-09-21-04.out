
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(74927)
> library(aibd2)
> 
> # Sys.setenv(nItems="20")
> # Sys.setenv(nSamples="100")
> # Sys.setenv(stamp="trashmeout")
> 
> stamp <- Sys.getenv("stamp")
> stamp
[1] "out.10.100.2019-03-26-09-21-04"
> 
> pdf(paste0(stamp,".pdf"),width=6,height=4)
> 
> mass <- 1.5
> sigx <- 3.0
> sigw <- 1.0
> nItems <- as.integer(Sys.getenv("nItems"))
> nItems
[1] 10
> 
> nSamples <- as.integer(Sys.getenv("nSamples"))
> nSamples
[1] 100
> 
> distances <- as.matrix(dist(scale(USArrests)))
> which <- sample(1:nrow(distances),nItems)
> distances <- distances[which,which]
> 
> temperature <- 4
> similarity <- 1/as.matrix(distances)^temperature
> simVector <- as.vector(similarity)
> simVector <- simVector[!is.infinite(simVector)]
> plot(simVector,type="h")
> 
> distIBP <- ibp(mass,nItems)
> distAIBD <- aibd(mass,1:nItems,similarity)
> 
> Z <- sampleFeatureAllocation(1, distAIBD, "scala")[[1]]
> dim(Z)
[1] 10  4
> 
> dimW <- 32
> W <- matrix(rnorm(ncol(Z)*dimW,sd=sigw),nrow=ncol(Z),ncol=dimW)
> 
> e <- rnorm(nrow(Z)*ncol(W),0,sd=sigx)
> X <- Z %*% W + e
> 
> samplesAIBD <- samplePosteriorLGLFM(Z, distAIBD, X, sdX=sigx, sdW=sigw, samplingMethod="viaNeighborhoods2", implementation="scala", nSamples=nSamples, parallel=FALSE, rankOneUpdates=TRUE)
[                                                                                                    ]****************************************************************************************************]
Parallel:           false
Rank-one updates:   true
Main lapse:         1 invocations in 4.6654 seconds
Combinatoric lapse: 1000 invocations in 4.1776 seconds
Singleton lapse:    1000 invocations in 0.2468 seconds
Prior:              100675 invocations in 1.2526 seconds
Likelihood:         101675 invocations in 3.1047 seconds
Enumeration lapse:  1000 invocations in 0.1530 seconds
Note that prior and likelihood timings are only meaningful if parallel == false.
> 
> samplesIBP <- samplePosteriorLGLFM(Z, distIBP, X, sdX=sigx, sdW=sigw, samplingMethod="viaNeighborhoods2", implementation="scala", nSamples=nSamples, parallel=FALSE, rankOneUpdates=TRUE)
[                                                                                                    ]****************************************************************************************************]
Parallel:           false
Rank-one updates:   true
Main lapse:         1 invocations in 2.2885 seconds
Combinatoric lapse: 1000 invocations in 2.0199 seconds
Singleton lapse:    1000 invocations in 0.1706 seconds
Prior:              74392 invocations in 0.1962 seconds
Likelihood:         75392 invocations in 1.9627 seconds
Enumeration lapse:  1000 invocations in 0.0646 seconds
Note that prior and likelihood timings are only meaningful if parallel == false.
> 
> library(sdols)
> epamAIBD <- expectedPairwiseAllocationMatrix(samplesAIBD)
> epamIBP  <- expectedPairwiseAllocationMatrix(samplesIBP)
> 
> plot(as.vector(epamAIBD),as.vector(as.matrix(distances)), main="AIBD")
> cor(as.vector(epamAIBD),as.vector(as.matrix(distances)))
[1] -0.6336877
> 
> plot(as.vector(epamIBP),as.vector(as.matrix(distances)), main="IBP")
> cor(as.vector(epamIBP),as.vector(as.matrix(distances)))
[1] -0.3273159
> 
> salso(epamAIBD, structure = "featureAllocation")
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
 [1,]    1    1    0    0    0    0    0    0
 [2,]    1    0    1    1    0    0    0    0
 [3,]    1    0    0    0    1    0    0    0
 [4,]    1    0    1    0    0    0    0    0
 [5,]    1    0    1    0    0    0    0    0
 [6,]    1    0    0    1    0    1    0    0
 [7,]    1    0    0    0    1    0    0    0
 [8,]    1    0    1    0    0    1    0    0
 [9,]    1    0    0    0    0    0    1    0
[10,]    1    0    0    1    0    0    0    1
attr(,"nScans")
[1] -1
attr(,"nCandidates")
[1] 100
> salso(epamIBP,  structure = "featureAllocation")
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1    0    0    0    0    0    0    0    0
 [2,]    1    1    1    0    0    0    0    0    0
 [3,]    1    0    0    1    0    0    0    0    0
 [4,]    1    1    0    0    1    0    0    0    0
 [5,]    1    0    0    0    0    1    0    0    0
 [6,]    1    0    0    0    0    0    1    0    0
 [7,]    1    1    0    0    0    0    0    0    0
 [8,]    1    1    0    0    0    0    1    0    0
 [9,]    1    0    0    0    0    0    0    1    0
[10,]    1    1    0    0    0    0    0    0    1
attr(,"nScans")
[1] -1
attr(,"nCandidates")
[1] 100
> 
> dev.off()
null device 
          1 
> save.image(file=paste0(stamp,".RData"))
> 
> 
> proc.time()
   user  system elapsed 
  0.248   0.049  23.050 
